# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fu3GaLI35odA3jssrm3Ofu6wPmfDOVX9
"""

# Importing required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv("Superstore.csv", encoding='latin1')

# Display the first few rows
print("Initial Data Preview:")
print(df.head())

# 1. Data Cleaning

# Check for missing values
print("\nMissing Values:\n", df.isnull().sum())

# Fill missing values
df.fillna({
    'Sales': df['Sales'].median(),
    'Profit': df['Profit'].median()
}, inplace=True)

# Drop rows with any remaining missing values
df.dropna(inplace=True)

# Remove duplicates
df.drop_duplicates(inplace=True)

# Detect and remove outliers using IQR (Interquartile Range) for Sales and Profit
def remove_outliers_iqr(data, column):
    Q1 = data[column].quantile(0.25)
    Q3 = data[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return data[(data[column] >= lower_bound) & (data[column] <= upper_bound)]

df = remove_outliers_iqr(df, 'Sales')
df = remove_outliers_iqr(df, 'Profit')


# 2. Statistical Analysis

print("\nDescriptive Statistics:")
print(df[['Sales', 'Profit']].describe())



# Correlation matrix
print("\nCorrelation Matrix:")
print(df[['Sales', 'Profit']].corr())


# 3. Data Visualization

# Set plot style
sns.set(style="whitegrid")

# Histogram: Distribution of Sales
plt.figure(figsize=(10, 5))
sns.histplot(df['Sales'], bins=30, kde=True, color='skyblue')
plt.title('Distribution of Sales')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.show()

# Histogram: Distribution of Profit
plt.figure(figsize=(10, 5))
sns.histplot(df['Profit'], bins=30, kde=True, color='lightgreen')
plt.title('Distribution of Profit')
plt.xlabel('Profit')
plt.ylabel('Frequency')
plt.show()

# Boxplot: Sales by Region
plt.figure(figsize=(12, 6))
sns.boxplot(data=df, x='Region', y='Sales', palette='pastel')
plt.title('Sales by Region')
plt.show()

# Boxplot: Profit by Product Category
if 'Category' in df.columns:
    plt.figure(figsize=(12, 6))
    sns.boxplot(data=df, x='Category', y='Profit', palette='Set2')
    plt.title('Profit by Product Category')
    plt.show()

# Heatmap: Correlation between Sales and Profit
plt.figure(figsize=(6, 4))
sns.heatmap(df[['Sales', 'Profit']].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# END OF EDA

print("\nEDA Completed Successfully.")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error

# Load the dataset with the corrected filename
df = pd.read_excel("/content/sale_data.xlsx")

# Display the shape of the dataset
print("Shape of the dataset:", df.shape)

# Check for missing values
print("\nMissing values before cleaning:\n", df.isnull().sum())

# Display data types
print("\nData types before cleaning:\n")
df.info()

# Let's inspect the first few rows to confirm column names
print("\nFirst 5 rows of the dataset:\n", df.head())

# Rename columns for consistency with the problem description, if they differ.
# Assuming 'Order Date' corresponds to 'Date'
df.rename(columns={'Order Date': 'Date'}, inplace=True)


# Remove duplicates
df.drop_duplicates(inplace=True)
print("\nShape of the dataset after removing duplicates:", df.shape)

# Convert 'Date' column to datetime objects
df['Date'] = pd.to_datetime(df['Date'])

# Fill missing values
# For numerical columns, use median
for col in ['Sales', 'Profit', 'Discount']:
    if col in df.columns and df[col].isnull().any():
        median_val = df[col].median()
        df[col].fillna(median_val, inplace=True)

# For categorical columns, use mode (if any missing values existed)
for col in ['Product', 'Region', 'Category']:
    if col in df.columns and df[col].isnull().any():
        mode_val = df[col].mode()[0]
        df[col].fillna(mode_val, inplace=True)

print("\nMissing values after cleaning:\n", df.isnull().sum())
print("\nData types after cleaning:\n")
df.info()

# --- Exploratory Data Analysis (EDA) ---

# 1. Sales trends over time (time series plot)
plt.figure(figsize=(12, 6))
df.set_index('Date')['Sales'].plot()
plt.title('Sales Trends Over Time')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.grid(True)
plt.tight_layout()
plt.savefig('sales_trends_over_time.png')
plt.show()

# 2. Scatter plot showing Profit vs. Discount
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Discount', y='Profit', data=df)
plt.title('Profit vs. Discount')
plt.xlabel('Discount')
plt.ylabel('Profit')
plt.grid(True)
plt.tight_layout()
plt.savefig('profit_vs_discount_scatter.png')
plt.show()

# 3. Bar charts showing Sales by Region and Category

# Sales by Region
plt.figure(figsize=(12, 6))
sales_by_region = df.groupby('Region')['Sales'].sum().sort_values(ascending=False)
sns.barplot(x=sales_by_region.index, y=sales_by_region.values, palette='viridis')
plt.title('Total Sales by Region')
plt.xlabel('Region')
plt.ylabel('Total Sales')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig('sales_by_region_bar.png')
plt.show()

# Sales by Category
plt.figure(figsize=(12, 6))
sales_by_category = df.groupby('Category')['Sales'].sum().sort_values(ascending=False)
sns.barplot(x=sales_by_category.index, y=sales_by_category.values, palette='magma')
plt.title('Total Sales by Category')
plt.xlabel('Category')
plt.ylabel('Total Sales')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig('sales_by_category_bar.png')
plt.show()


# --- Predictive Modeling ---

# Prepare data for Linear Regression
X = df[['Profit', 'Discount']]
y = df['Sales']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate model performance
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f"\nLinear Regression Model Performance:")
print(f"R-squared (RÂ²): {r2:.4f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")

# Display model coefficients
print(f"Model Coefficients: Profit: {model.coef_[0]:.2f}, Discount: {model.coef_[1]:.2f}")
print(f"Model Intercept: {model.intercept_:.2f}")